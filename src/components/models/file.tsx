import { z } from 'zod';
import { getDefaults, makeResultSchema, zTime } from './utils/helpers';

export const URIInfoSchema = z.object({
  uri: z.string().default('').catch('').describe('Full URI'),

  // https://www.rfc-editor.org/rfc/rfc1808.html#section-2.1
  scheme: z.string().default('').catch('').describe(''),
  netloc: z.string().default('').catch('').describe(''),
  path: z.string().optional().default('').catch('').describe(''),
  params: z.string().optional().default('').catch('').describe(''),
  query: z.string().optional().default('').catch('').describe(''),
  fragment: z.string().optional().default('').catch('').describe(''),

  // Ease-of-use elements
  username: z.string().optional().default('').catch('').describe(''),
  password: z.string().optional().default('').catch('').describe(''),
  hostname: z.string().default('').catch('').describe(''),
  port: z.string().optional().default('').catch('').describe('')
});

export const SeenSchema = z.object({
  count: z.number().default(1).catch(1).describe('How many times have we seen this file?'),
  first: zTime.describe('First seen timestamp'),
  last: zTime.describe('Last seen timestamp')
});

export const LabelCategoriesSchema = z.object({
  attribution: z
    .array(z.string().default('').catch(''))
    .default([])
    .catch([])
    .describe('List of labels related to attribution of this file (implant name, actor, campain...)'),
  info: z
    .array(z.string().default('').catch(''))
    .default([])
    .catch([])
    .describe('List of extra informational labels about the file'),
  technique: z
    .array(z.string().default('').catch(''))
    .default([])
    .catch([])
    .describe('List of labels related to the technique used by the file and the signatures that hits on it.')
});

export const ReactionSchema = z.object({
  icon: z
    .enum(['', 'thumbs_up', 'thumbs_down', 'love', 'smile', 'surprised', 'party'])
    .default('')
    .catch('')
    .describe('Icon of the user who made the reaction'),
  uname: z.string().default('').catch('').describe('Username of the user who made the reaction')
});

export const CommentSchema = z.object({
  cid: z.string().default('').catch('').describe('Comment ID'),
  uname: z.string().default('').catch('').describe('Username of the user who made the comment'),
  date: z.string().datetime().default('NOW').catch('NOW').describe('Datetime the comment was made on'),
  text: z.string().default('').catch('').describe('Text of the comment written by the author'),
  reactions: z.array(ReactionSchema).default([]).catch([]).describe('List of reactions made on a comment')
});

export const FileInfoSchema = z.object({
  archive_ts: z.string().optional().default(null).catch(null).describe('Archiving timestamp (Deprecated)'),
  ascii: z.string().default('').catch('').describe('Dotted ASCII representation of the first 64 bytes of the file'),
  classification: z.string().default('').catch('').describe('Classification of the file'),
  comments: z.array(CommentSchema).default([]).catch([]).describe('List of comments made on a file'),
  entropy: z.number().default(0).catch(0).describe('Entropy of the file'),
  expiry_ts: zTime.describe('Expiry timestamp'),
  hex: z.string().default('').catch('').describe('Hex dump of the first 64 bytes of the file'),
  id: z.string().default('').catch('').describe('ID of the file'),
  is_section_image: z.boolean().default(false).catch(false).describe('Is this an image from an Image Result Section?'),
  is_supplementary: z.boolean().default(false).catch(false).describe('Is this a file generated by a service?'),
  label_categories: LabelCategoriesSchema.default(getDefaults(LabelCategoriesSchema)).describe('Categories of label'),
  labels: z.array(z.string().default('').catch('')).default([]).catch([]).describe('List of labels of the file'),
  magic: z.string().default('').catch('').describe('Output from libmagic related to the file'),
  md5: z.string().default('').catch('').describe('MD5 of the file'),
  mime: z.string().optional().default('').catch('').describe('MIME type of the file as identified by libmagic'),
  seen: SeenSchema.default(getDefaults(SeenSchema)).describe('Details about when the file was seen'),
  sha1: z.string().default('').catch('').describe('SHA1 hash of the file'),
  sha256: z.string().default('').catch('').describe('SHA256 hash of the file'),
  size: z.number().default(0).catch(0).describe('Size of the file in bytes'),
  ssdeep: z.string().default('').catch('').describe('SSDEEP hash of the file'),
  tlsh: z.string().default('').catch('').describe('TLSH hash of the file'),
  type: z.string().default('').catch('').describe('Type of file as identified by Assemblyline'),
  uri_info: URIInfoSchema.default(null).describe('"URI structure to speed up specialty file searching"')
});

export const FileInfoResultsSchema = makeResultSchema(FileInfoSchema).describe('asdasd');

export type URIInfo = z.infer<typeof URIInfoSchema>;
export type Seen = z.infer<typeof SeenSchema>;
export type LabelCategories = z.infer<typeof LabelCategoriesSchema>;
export type Reaction = z.infer<typeof ReactionSchema>;
export type Comment = z.infer<typeof CommentSchema>;
export type FileInfo = z.infer<typeof FileInfoSchema>;
export type FileInfoResults = z.infer<typeof FileInfoResultsSchema>;
